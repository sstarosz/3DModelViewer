# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  push:
    branches: [ "main", "github-actions-tests" ]
  pull_request:
    branches: [ "main" ]

env:
  VCPKG_BINARY_SOURCES: "clear;x-gha,readwrite"

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      matrix:
        os: [windows-latest]  #TODO add ubuntu-latest and macos-latest
        build_type: [Release]
        cmake_workflow_preset: [Windows-MSVC-Workflow, Windows-Clang-Workflow] #TODO add GCC-x64-Release-Workflow and Clang-x64-Release-Workflow
        include:
          - os: windows-latest
            cmake_workflow_preset: Windows-Workflow
          - os: windows-latest
            cmake_workflow_preset: Windows-Clang-Workflow
        #exclude:
        #  - os: windows-latest
        #    c_compiler: gcc

    

    steps:
    - uses: actions/checkout@v3

    ## Setup vcpkg
    - name: Export GitHub Actions cache environment variables
      uses: actions/github-script@v6
      with:
        script: |
          core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
          core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');

    - name: "Set vcpkg environmental variables"
      shell: bash
      run: echo "VCPKG_ROOT=$VCPKG_INSTALLATION_ROOT" >> $GITHUB_ENV

    ### Install missing dependencies on windows, linux and macos using package managers
    - name: Install Ninja
      uses: seanmiddleditch/gha-setup-ninja@master

    - name: Setup VS Environment
      if: runner.os == 'Windows'
      uses: seanmiddleditch/gha-setup-vsdevenv@master

    - name: Install Vulkan SDK
      uses: humbletim/install-vulkan-sdk@v1.1.1
      with:
        cache: true

    - name: Install Qt
      uses: jurplel/install-qt-action@v3
      with:
        version: '6.*'
        cache: true

    ### Run CMake
      #TODO Investigate how to run tests on GPU
    - name: Run CMake Workflow
      env:
        GTEST_COLOR: yes
      run: cmake --workflow --preset ${{ matrix.cmake_workflow_preset }} 
